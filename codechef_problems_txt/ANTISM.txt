Anti-Subarray Sum
You've been working with subarrays for so long that you're sick of them – subarrays are now banned!
Formally, consider a set of indices
{i
1
,i
2
,…,i
k
} such that
1≤i
1
<i
2
<⋯<i
k
≤N.
This set is said to be an anti-subarray if
i
k
−i
1
>k−1.
In particular, note that an anti-subarray must have length greater than
1.
You have an array
A containing
N (
N≥4) integers, a boolean array
B of length
N, and an integer
X.
You can perform the following operation:
Choose an index
i (
1≤i≤N) such that
B
i
=1.
Then, increase
A
i
by
1.
Find the minimum number of operations needed to obtain an anti-subarray whose sum is at least
X.
It is guaranteed that
B contains at least one element equal to
1.
Input Format
The first line of input will contain a single integer
T, denoting the number of test cases.
Each test case consists of three lines of input.
The first line of each test case contains two space-separated integers
N and
X – the length of the array and the target sum.
The second line contains
N space-separated integers
A
1
,A
2
,…,A
N
.
The third line contains
N space-separated integers
B
1
,B
2
,…,B
N
.
Output Format
For each test case, output on a new line a single integer: the minimum number of operations needed to obtain an anti-subset of
A with sum
≥X.
Constraints
1≤T≤10
5
4≤N≤2⋅10
5
−10
9
≤A
i
≤10
9
−2⋅10
14
≤X≤2⋅10
14
B
i
∈{0,1}, and at least one element of
B equals
1.
The sum of
N over all test cases won't exceed
2⋅10
5
.
Sample 1:
Input
Output
4
4 9
-200 5 100 2
1 1 1 1
4 9
-200 5 100 2
0 0 1 0
5 100
-28 40 -63 39 -109
1 0 1 0 1
5 70
-28 40 -63 39 -109
1 0 1 0 1
2
107
49
0
Explanation:
Test case
1: We're allowed to increase any element. One optimal solution is:
Increase
A
2
by
1, to obtain
[−200,6,100,2].
Increase
A
4
by
1, to obtain
[−200,6,100,3].
Now there's an anti-subarray with sum
≥9, formed by indices
{2,4}.
Test case
2: Same array and target as the previous test, but now only
A
3
can be increased.
Increasing it
107 times results in
[−200,5,207,2], which has the anti-subarray with indices
{1,3,4} giving a sum of
−200+207+2=9, which is the best we can do.
Test case
4: There's already an anti-subarray with sum
≥X=70, so no operations are needed.