Tree Removal
You are given a tree
†
†
consisting of
N vertices where each vertex
u is assigned a value
A
u
.
You start with a score of
0 and perform the following operation as many times as you like:
Pick a vertex
u whose current degree
‡
‡
is odd;
Add
A
u
to your score;
Remove vertex
u and all its incident edges from the graph.
Find a sequence of vertices to remove that attains the maximum score.
†
†
A tree with
N vertices is a connected graph with
N−1 edges and no cycles.
‡
‡
The degree of a vertex is the number of edges incident to it.
Input Format
The first line of input will contain a single integer
T, denoting the number of test cases.
Each test case consists of multiple lines of input.
The first line of each test case contains
N - the number of vertices in the tree.
The second line contains
N integers -
A
1
,A
2
,…,A
N
, denoting the values assigned to each vertex.
The next
N−1 lines contain
2 integers each -
u and
v denoting an edge between the vertices numbered
u and
v.
Output Format
For each test case:
On a new line, first print an integer
K (0≤K≤N) denoting the number of vertices you will remove.
In case
K>0, print on a new line,
K space-separated distinct integers
X
1
,X
2
,…,X
K
denoting the list of vertices you will remove in that order. At the time of removal,
X
i
should have odd degree.
The output must obtain the maximum possible score. If multiple sequence of vertex removal are possible, all will be accepted.
Constraints
1≤T≤10
4
2≤N≤2⋅10
5
1≤A
i
≤10
9
1≤u,v≤N,u

=v
The given set of edges describe a tree.
The sum of
N does not exceed
2⋅10
5
.
Sample 1:
Input
Output
2
3
1 2 3
1 2
2 3
4
1 1 1 1
1 2
1 3
1 4
2
3 2
3
3 4 2
Explanation:
Test case
1 :
We first remove vertex
3 which has
1 edge adjacent to it, and thus degree
1 which is odd. The score is now
3.
After removing vertex
3, vertex
2 has degree
1, which is also odd, thus we can remove vertex
2. The score becomes
3+2=5.
It can be proven that removing vertex
3 and then vertex
2 obtains the maximum possible score.