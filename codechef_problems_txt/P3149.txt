Easy Subarray Sum
You are given an array
A of length
N. You can perform the following operation on it any number of times (possibly, zero):
Choose any index
i (
1≤i≤N) and change
A
i
to
0.
Your goal is to maximize the value of the maximum subarray sum of
A.
Find the minimum number of operations needed to achieve this.
Note that an empty subarray has a sum of
0.
Formally,
For any pair of integers
(L,R), let
s(L,R) denote the subarray sum function, where:
If
1≤L≤R≤N, then
s(L,R)=A
L
+A
L+1
+…+A
R
Otherwise,
s(L,R)=0.
For the array
A, define
f(A):=max(s(L,R)) across all pairs
(L,R) of integers.
This is the maximum subarray sum of array
A.
Your goal is to make
f(A) as large as possible by performing the given operations on the array
A.
Find the minimum number of operations needed to achieve this goal.
Input Format
The first line of input will contain a single integer
T, denoting the number of test cases.
Each test case consists of two lines of input.
The first line of each test case contains
N — the number of elements in
A.
The second line of each test case contains
N space-separated integers
A
1
,A
2
,…,A
N
, denoting the array
A.
Output Format
For each test case, output on a new line the minimum number of operations required to achieve the maximum possible subarray sum.
Constraints
1≤T≤10
5
1≤N≤100
−100≤A
i
≤100
The sum of
N over all test cases won't exceed
4⋅10
5
.
Sample 1:
Input
Output
3
3
-1 -3 -4
3
1 -1 1
5
1 2 -1 -2 4
0
1
2
Explanation:
Test case
1: The current maximum subarray sum is
0, obtained by taking the empty subarray.
It can be shown that no matter how we perform operations, this will not change.
So, no operations need to be done, and the minimum number of operations required is
0.
Test case
2: Change
A
2
to
0 using the operation, making the array
[1,0,1].
This will make the maximum subarray sum
2, which is the maximum possible.
Using
1 operation this way is optimal.
Test case
3: Change
A
3
and
A
4
to
0 using the operation, turning the array into
[1,2,0,0,4].
This will make the maximum subarray sum
7, which is the maximum possible.
We needed
2 operations to do this.