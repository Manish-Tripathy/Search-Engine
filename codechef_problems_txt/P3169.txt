Make K Most Frequent
You are given an array
A of
N integers. You can perform the following operation any number of times:
Select and remove any prefix or suffix of the array
A, but not the entire array.
Your goal is to determine the minimum number of operations required to make
K the most frequent element in the array
A.
It is guaranteed that
K is initially present in the array
A.
Input Format
The first line of input will contain a single integer
T, denoting the number of test cases.
Each test case consists of two lines of input.
The first line of each test case contains two space-separated integers
N and
K — denoting the length of the array
A and the target number, which you want to make the most frequent element in the array, respectively.
The second line contains
N space-separated integers
A
1
,A
2
,A
3
,…,A
N
, denoting the array
A.
Output Format
For each test case, output on a new line the minimum number of operations required to make
K the most frequent number in the array.
Constraints
1≤T≤10
5
1≤N≤10
4
1≤K,A
i
≤20
It is guaranteed that
K is present in the array
A.
The sum of
N over all test cases does not exceed
2⋅10
5
.
Sample 1:
Input
Output
5
1 1
1
2 2
1 2
2 1
1 2
4 1
2 2 1 2
5 3
1 1 3 2 2
0
0
0
1
2
Explanation:
Test case
1: : Since
1 is already the most frequent, we don't need to perform any operations.
Test case
2: : Since
2 is already the most frequent, we don't need to perform any operations.
Test case
3: : Since
1 is already the most frequent, we don't need to perform any operations.
Test case
4: :
[
2,2
,1,2]
Delete prefix from l=1 to r=2
[1,2]. Since
1 is now the most frequent, we don't need to perform any operations. The total number of operations will be
1.
Test case
5: :
[
1,1
,3,2,2]
Delete prefix from l=1 to r=2
[3,2,2].
[3,
2,2
]
Delete suffix from l=2 to r=3
[3]. Since
3 is now the most frequent, we don't need to perform any operations. The total number of operations will be
2.