Trial of the Conqueror
Evenvalue, the king of the even numbers has now set out to conquer the leaves of a rooted tree.
The tree has
N nodes (numbered from
1 to
N) and is rooted at node
1, which Evenvalue is currently on.
In one move, he can do the following -
If the current node
U is a leaf, consider it conquered, choose
X such that
1≤X≤K, and move to the
X
th
ancestor of
U (if it exists).
Otherwise, move down to any one of the children of the current node.
Evenvalue wishes to conquer as many leaves as possible by some finite sequence of moves. Note that a leaf can only be conquered at most once. Please help him by counting the maximum number of leaves he can conquer.
Note:
X is said to be a child of
Y if
X is adjacent to
Y and
Y lies on the unique shortest path connecting the root (which is
1) and
X. In this case,
Y is said to be the parent or
1
st
ancestor of
X. The parent of
1 does not exist.
A leaf is a node which has no children.
The
X
th
(X>1) ancestor of
U is the parent of the
(X−1)
th
ancestor of
U.
Input Format
The first line of input will contain a single integer
T, denoting the number of test cases.
Each test case consists of multiple lines of input.
The first line of each test case contains two space-separated integers
N and
K — the number of nodes and the maximum allowed jump from a leaf.
The next
N−1 lines describe the edges. The
i
th
of these
N−1 lines contains two space-separated integers
U
i
and
V
i
, denoting an edge between
U
i
and
V
i
.
Output Format
For each test case, output on a new line, the maximum number of leaves Evenvalue can conquer using any finite sequence of moves.
Constraints
1≤T≤10
5
3≤N≤3⋅10
5
1≤K<N
1≤U
i
,V
i
≤N, U
i

=V
i
The given set of edges describe a tree.
The sum of
N over all test cases does not exceed
3⋅10
5
.
Sample 1:
Input
Output
1
3 1
1 2
2 3
1
Explanation:
Note that there are blank spaces in between test cases for Sample
2, which are not present in the actual tests. This is done to make the sample input clearer. You might need to remove these spaces when running your code on them.
Test case
1 : Evenvalue goes to
2, and then to
3 and thus conquers the leaf
3, which is also the only leaf. Thus he can only conquer atmost
1 leaf.
Sample 2:
Input
Output
5
3 1
1 2
2 3
5 2
1 2
2 3
3 4
1 5
6 1
1 2
2 3
1 4
1 5
5 6
10 2
3 4
8 2
9 7
7 5
5 4
4 1
1 6
6 2
2 10
5 1
2 1
1 3
3 4
4 5
1
2
2
3
2
Explanation:
Test case
2 : Evenvalue first goes to
5, then jumps back to the
1
st
ancestor of
5, i.e.
1, then he goes to
2, followed by
3 and
4. Thus he conquers both leaves of the tree.
Test case
3 : It can be shown that Evenvalue has a way to conquer leaves
6 and
4, but not all
3 simultaneously. Thus, the maximum is
2.