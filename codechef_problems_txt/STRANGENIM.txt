Strange Nim Game
Alice and Bob are playing a strange variant of the Nim game. The rules are as follows:
There are
N towers, with the
i-th tower having
A
i
rings.
On their turn, a player selects a tower
i that contains a positive number of rings, and a positive digit
d such that
d appears in the decimal representation of
A
i
.
Then, they remove
d rings from the
i-th tower.
For example, if
A
i
=5028, the current player can remove
2,5, or
8 rings from it.
The game ends when all rings from all towers are removed. The player who removed the last ring wins.
Alice always makes the first move, and both players play optimally.
You are given the initial number of rings in
N towers, represented by the array
A.
Process
Q queries and updates of the following types:
Query: 1 L R
Consider only the towers from indices
L through
R, inclusive - i.e. the towers
[A
L
,A
L+1
,…,A
R
].
Count the number of non-empty subsequences of these towers that will result in Alice winning, if the game is played with only the towers in this subsequence.
The answer can be large, so compute it modulo
10
9
+7.
Update: 2 i x
Set
A
i
=x.
Input Format
The first line contains an integer
N — the number of towers.
The second line contains
N space-separated integers
A
1
,A
2
,…,A
N
— the initial number of rings in each tower.
The third line contains an integer
Q — the number of queries.
The next
Q lines contain the queries. Each line will be in one of two types:
1 L R, denoting a query with parameters
L and
R.
2 i x, denoting an update with parameters
i and
x.
Output Format
For each query, print a single integer on a new line — the number of subsequences of towers from index
L to
R such that Alice will win if both players play optimally on this subsequence, starting with the initial configuration of the towers.
The answers must be printed modulo
10
9
+7.
Constraints
1≤N≤2×10
5
1≤Q≤10
5
1≤A
i
≤2×10
5
Each query/update is either of the form 1 L R or 2 i x.
For queries,
1≤L≤R≤N
For updates,
1≤i≤N and
1≤x≤2×10
5
There is at least one type 1 query.
Sample 1:
Input
Output
3
11 2 3
3
1 1 3
2 1 10
1 1 3
4
4
Explanation:
Initial Towers Configuration:
The towers initially contain the following number of rings:
[11,2,3].
Query 1 (1 1 3):
We need to find how many subsequences of towers from index
1 to
3 will result in Alice winning if both players play optimally.
The subsequences of towers selected are:
[11] — Alice wins.
[2] — Alice wins.
[3] — Alice wins.
[11,2] — Bob wins.
[11,3] — Bob wins.
[2,3] — Bob wins.
[11,2,3] — Alice wins.
Therefore, the total number of subsequences where Alice wins is
4.
Query 2 (2 1 10):
The number of rings in the 1st tower is updated to
10, so the towers are now:
[10,2,3].
Query 3 (1 1 3):
We now need to find how many subsequences of towers from index
1 to
3 will result in Alice winning.
Since the towers are now
[10,2,3], the subsequences that Alice will win on are as follows:
[10] — Bob wins.
[2] — Alice wins.
[3] — Alice wins.
[10,2] — Alice wins.
[10,3] — Alice wins.
[2,3] — Bob wins.
[10,2,3] — Bob wins.
Hence, the total number of subsequences where Alice wins is
4.