Lexio Swap
You are given two strings
S and
T, both of which contain only the letters '
A' and '
B'.
You can perform the following operation on string
S:
Choose an index
i
(1≤i≤N−3) such that
S
i+1
=S
i+2
and at the same time
S
i

=S
i+3
.
Then, delete the characters at indices
i+1 and
i+2 from
S. The two remaining parts are concatenated together.
For example, if
S=AABBBA, and the operation is performed with
i=2 (which is valid since
S
2

=S
5
while
S
3
=S
4
),
S
3
and
S
4
will be deleted, turning the string into
AABA.
You can perform the given operation as many times as you like (possibly, zero).
Is it possible to make
S equal to
T?
Input Format
The first line of input contains a single integer
Q — the number of test cases.
Each test case consists of three lines of input.
The first line of each test case contains two integers
N — the size of the string
S, and
M — the size of the string
T.
The second line of each test case contains the string
S, containing the letters '
A' and '
B' only.
The third line of each test case contains the string
T, containing the letters '
A' and '
B' only.
Output Format
For each test case, output on a new line the answer: YES if it is possible to convert
S into
T, otherwise NO.
Each character of the output may be printed in either uppercase or lowercase, i.e., the strings NO, No, nO, and no will all be treated as equivalent.
Constraints
1≤Q≤10
4
1≤N≤3⋅10
5
1≤M≤3⋅10
5
S and
T contain only the characters A and B.
The sum of
N and the sum of
M over all test cases both won't exceed
3⋅10
5
.
Sample 1:
Input
Output
3
13 7
BBBBAAABAAAAA
BBABAAA
6 4
AAABBA
ABAB
10 4
ABBBAAAAAB
ABAB
YES
NO
YES
Explanation:
Test case
1:
We can apply operation at
i=2, then the string becomes
BBAAABAAAAA.
Then we can apply operation at
i=3, then the string becomes
BBABAAAAA.
Then we can apply operation at
i=4, then the string becomes
BBABAAA, which is equal to
T.
Test case
2:
You can not convert
S into
T by using the operation any way or any number of times.