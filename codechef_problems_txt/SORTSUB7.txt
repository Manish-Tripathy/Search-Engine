Sortable Subarrays (Hard)
This is the hard version of the problem. The only difference is the constraints. Here
N and sum of
N are bounded by
2⋅10
5
.
An array
A is called sortable if it can be sorted in strictly ascending order with the use of the following operation any number of times:
Choose index
i and a positive integer
X, and then update
A
i
to
A
i
modX.
Strictly ascending order means that
A
1
<A
2
<…<A
∣A∣
.
Your task is to find the number of sortable subarrays of
A, i.e. find how many pairs
(L,R) exist such that
1≤L≤R≤N and
[A
L
,A
L+1
,…,A
R
] is sortable.
Input Format
The first line of input will contain a single integer
T, denoting the number of test cases.
Each test case consists of multiple lines of input.
The first line of each test case contains
N - the size of the array
A.
The second line contains
N integers -
A
1
,A
2
,…,A
N
.
Output Format
For each test case, output on a new line the number of sortable subarrays of
A.
Constraints
1≤T≤10
4
1≤N≤2⋅10
5
1≤A
i
≤10
9
The sum of
N over all test cases does not exceed
2⋅10
5
.
Sample 1:
Input
Output
5
4
2 1 3 3
3
1 2 3
7
8 12 7 5 4 9 3
7
5 3 1 4 2 1 1
3
2 2 2
9
6
23
15
5
Explanation:
Test Case 1 : All subarrays except the whole array are sortable. Some examples are below:
[1,3,3] : Choose
i=1,X=1, array updated to
[0,3,3]. Choose
i=2,X=2, array updated to
[0,1,3], which is sorted in strictly ascending order.
[2,1] : Choose
i=1,X=2, array updated to
[0,1], which is sorted in strictly ascending order.